// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum LogStatus {
  INFO
  SUCCESS
  FAILURE
}

enum Role {
  USER 
  AUDITOR
}

model User {
  id         Int      @id @default(autoincrement())
  email      String   @unique
  password   String
  firstName  String
  lastName   String
  phone      String?
  address    String?
  city       String?
  province   String?
  role       Role     @default(USER)
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  invoices   Invoice[]
  logs       Log[]
}

model Brand {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  logo        String?
  description String?
  isActive    Boolean  @default(true)
  products    Product[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  products  Product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id            Int             @id @default(autoincrement())
  name          String
  price         Float
  stock         Int             @default(0)
  imagesURL     String[]
  brand         Brand?          @relation(fields: [brandId], references: [id], onDelete: Restrict)
  brandId       Int?
  categories    Category[]
  provider      Provider?       @relation(fields: [providerId], references: [id])
  providerId    Int?
  invoiceDetails InvoiceDetail[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Provider {
  id            Int             @id @default(autoincrement())
  name          String
  email         String?
  phone         String?
  address       String?
  city          String?
  province      String?
  products      Product[]
  invoiceDetails InvoiceDetail[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Invoice {
  id          Int             @id @default(autoincrement())
  invoiceNumber String        @unique
  user        User?           @relation(fields: [userId], references: [id])
  userId      Int?
  total       Float
  items       InvoiceDetail[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model InvoiceDetail {
  id          Int      @id @default(autoincrement())
  invoice     Invoice  @relation(fields: [invoiceId], references: [id])
  invoiceId   Int
  product     Product  @relation(fields: [productId], references: [id])
  productId   Int
  provider    Provider @relation(fields: [providerId], references: [id])
  providerId  Int
  quantity    Int
  unitPrice   Float
  subtotal    Float
}

model Log {
  id        Int      @id @default(autoincrement())
  status    LogStatus @default(INFO)
  action    String
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?
  details   String?
  timestamp DateTime @default(now())
}